package org.uma.jmetal.problem.singleobjective.trading.daos;

import org.slf4j.LoggerFactory;
import org.uma.jmetal.problem.singleobjective.trading.model.StrategyVector;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by des01c7 on 22-03-19.
 */
public class StrategyVectorDAO {

    static private final Logger logger = (Logger) LoggerFactory.getLogger(DataSourceFactory.class);

    public StrategyVector persist(StrategyVector strategyVector) throws Exception {

        /*
         * param1: ID
         * param 2: DesType ID
         * param 3: Term
         * param 4: case
         * param 5: auto-generado
         * param 6: validity until
         * param 7: published
         * param 8: estado
         * param 9: id user
         * param 10: id concepto
         */
        String sql = "{call trd.create_strategy_vector(?,?,?,?,?,?,?,?,?,?,?)}";

        try (Connection connect = DataSourceFactory.getInstance().getConnection();
             CallableStatement call = connect.prepareCall(sql)) {

            call.setDate(1, strategyVector.getDate());
            call.setTimestamp(2, strategyVector.getTimestamp());
            call.setBoolean(3, strategyVector.isCciCorrection());
            call.setBoolean(4, strategyVector.isGlobalExtrema());
            call.setBoolean(5, strategyVector.isMovingMomentum());
            call.setBoolean(6, strategyVector.isRsi2());
            call.setBoolean(7, strategyVector.isMacd());
            call.setBoolean(8, strategyVector.isStochastic());
            call.setBoolean(9, strategyVector.isParabolidSar());
            call.setBoolean(10, strategyVector.isMovingAverages());
            call.setBoolean(11, strategyVector.isBagovino());
            call.setBoolean(12, strategyVector.isFxBootcamp());
            call.setBoolean(13, strategyVector.isTunnel());

            call.execute();

            ResultSet rs = call.getResultSet();

            if (rs.next()) {
                strategyVector.setId(rs.getLong(1));
            } else {
                String errorMsg = "El registro no fue creado. Contacte a Desarrollo";
                logger.log(Level.SEVERE, errorMsg);
                throw new Exception(errorMsg);
            }
            rs.close();
        } catch (SQLException e) {
            logger.log(Level.SEVERE, e.getMessage());
            throw new Exception(e);
        }

        return strategyVector;
    }

    public StrategyVector getLastUpdate() throws Exception {

        StrategyVector strategyVector = null;

        String sql = "{call trd.get_last_update()}";

        try (Connection connect = DataSourceFactory.getInstance().getConnection();
             CallableStatement call = connect.prepareCall(sql)) {

            call.execute();

            logger.log(Level.INFO, "Registros recuperadas:");

            ResultSet rs = call.getResultSet();

            while (rs.next()) {
                strategyVector = createStrategyVectorFromResultSet(rs);
            }

        } catch (SQLException e) {
            String errorMsg = "Error al recuperar la descripci√≥n de la BDD.";
            logger.log(Level.SEVERE, e.getMessage());
            throw new Exception(e.getMessage());
        }

        return strategyVector;
    }

    private StrategyVector createStrategyVectorFromResultSet(ResultSet resultSet) throws SQLException {

        StrategyVector strategyVector = null;

        long id = resultSet.getLong("id");

        /*
         * Try y catch ignored porque no todas las funciones de la BD que recuperan Descriptions de la BD traen esta columna.
         * Ej: Usar la funcion semantikos.get_descriptions_by_idconcept para recueprar conceptos se cae con la excepcion:
         * org.postgresql.util.PSQLException: The column name uses was not found in this ResultSet.
         */
        int uses = 0;
        try {
            uses = resultSet.getInt("uses");
        } catch (Exception ignored) {}

        String descriptionID = resultSet.getString("description_id");
        long idDescriptionType = resultSet.getLong("id_description_type");
        String term = resultSet.getString("term");
        boolean isCaseSensitive = resultSet.getBoolean("case_sensitive");
        boolean isAutoGenerated = resultSet.getBoolean("autogenerated");
        boolean isPublished = resultSet.getBoolean("is_published");
        boolean isModeled = resultSet.getBoolean("is_modeled");

        long idConcept = resultSet.getLong("id_concept");

        return strategyVector;

        //return new Description(id, conceptByID, descriptionID, descriptionType, term, uses, isCaseSensitive, isAutoGenerated, isPublished, validityUntil, creationDate, user, isModeled);
    }


}
